{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["// 1. Отримаємо посилання на форму, input, текстове поле, submit:\nconst form = document.querySelector(\".feedback-form\");  // Отримаємо посилання на форму\nconst inputEl = form.elements.email;                    // Отримаємо поcилання на input\nconst textarea = form.querySelector(\"textarea\");        // Отримаємо поcилання на текстове поле\nconst formSubmit = form.querySelector('button');        // Отримаємо посилання на submit (отримано з форми, щоб уникнути можливих конфліктів)\n\n\n// 2. Створенний ключ для зберігання данних у локальне сховище\nconst STORAGE_KEY = \"feedback-form-state\";              // створенний ключ для зберігання данних у сховище\n\n\n// 3. (1.) Оголошення поза будь-якими функціями об’єкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }\nconst formData = {\n    email: '', \n    message: '',\n};\n\n// 4. (2.2) Повернення данних з локального сховища збереженим за ключем.\nconst savedData = localStorage.getItem(STORAGE_KEY); \n\n// 7. (3.) При завантаженні сторінки перевір, чи є дані у локальному сховищі. Якщо так, використовуй їх для заповнення форми та об'єкта formData. Якщо ні, залиш поля форми порожніми.\nlet parsedData = {}; // Створюється порожній об'єкт parsedData. Він буде використовуватися для зберігання розпарсованих даних з localStorage.\nif (savedData) {     // Перевірка наявності збережених даних у localStorage\n    try {                                   // Використовується try...catch блок для спроби розпарсити збережені дані за допомогою JSON.parse(). Якщо дані є валідним JSON, вони будуть перетворені в об'єкт JavaScript і збережені в змінну parsedData.\n        parsedData = JSON.parse(savedData);\n    } catch (error) {\n        console.error(\"Error parsing localStorage data:\", error);\n    }\n}\n\ninputEl.value = parsedData.email || '';\ntextarea.value = parsedData.message || '';     \n\ninputEl.value = formData.email; // Встановлює значення для елементу input (поля для введення email)\ntextarea.value = formData.message; // Встановлює значення для елементу textarea (поля для введення повідомлення)\n\n\n// 5. (2.) Використовуй метод делегування для відстеження змін у формі через подію input.\nform.addEventListener(\"input\", handleInput);\nform.addEventListener(\"submit\", submitForm);\n\n\n// 6. (2.1) Зберігай актуальні дані з полів email та message у formData та записуй цей об’єкт у локальне сховище. Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\nfunction handleInput(event) {\n    formData.email = inputEl.value.trim();\n    formData.message = textarea.value.trim();\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(formData)); // зберігання даних у сховище\n}\n\n\n// 8. (2.2) Зберігай актуальні дані з полів email та message у formData та записуй цей об’єкт у локальне сховище. Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\nfunction submitForm(event) {\n    event.preventDefault();\n\n    // 9. (4.) Перед відправленням форми переконайся, що обидва поля форми заповнені. Якщо будь-яке з полів (властивостей об’єкта formData) порожнє, показуй сповіщення з текстом «Fill please all fields». \n    if (!inputEl.value || !textarea.value) {\n        return alert('Fill please all fields');\n    }\n\n    // 10. (4.1) Якщо всі поля заповнені, *виведи у консоль об’єкт formData з актуальними значеннями, **очисти локальне сховище, ***об’єкт formData і ****поля форми.\n    console.log(formData);                //* виведення у консоль об’єкт formData з актуальними значеннями\n    localStorage.removeItem(STORAGE_KEY); // ** очистка локального сховища\n    formData.email = '';                  // *** очистка об’єкта formData (email)\n    formData.message = '';                // *** очистка об’єкта formData (message)\n    form.reset();                         // **** Очищення полів форми\n}"],"names":["form","inputEl","textarea","STORAGE_KEY","formData","savedData","parsedData","error","handleInput","submitForm","event"],"mappings":"wFACA,MAAMA,EAAO,SAAS,cAAc,gBAAgB,EAC9CC,EAAUD,EAAK,SAAS,MACxBE,EAAWF,EAAK,cAAc,UAAU,EAC3BA,EAAK,cAAc,QAAQ,EAI9C,MAAMG,EAAc,sBAIdC,EAAW,CACb,MAAO,GACP,QAAS,EACb,EAGMC,EAAY,aAAa,QAAQF,CAAW,EAGlD,IAAIG,EAAa,CAAA,EACjB,GAAID,EACA,GAAI,CACAC,EAAa,KAAK,MAAMD,CAAS,CACpC,OAAQE,EAAO,CACZ,QAAQ,MAAM,mCAAoCA,CAAK,CAC1D,CAGLN,EAAQ,MAAQK,EAAW,OAAS,GACpCJ,EAAS,MAAQI,EAAW,SAAW,GAEvCL,EAAQ,MAAQG,EAAS,MACzBF,EAAS,MAAQE,EAAS,QAI1BJ,EAAK,iBAAiB,QAASQ,CAAW,EAC1CR,EAAK,iBAAiB,SAAUS,CAAU,EAI1C,SAASD,EAAYE,EAAO,CACxBN,EAAS,MAAQH,EAAQ,MAAM,KAAI,EACnCG,EAAS,QAAUF,EAAS,MAAM,KAAI,EACtC,aAAa,QAAQC,EAAa,KAAK,UAAUC,CAAQ,CAAC,CAC9D,CAIA,SAASK,EAAWC,EAAO,CAIvB,GAHAA,EAAM,eAAc,EAGhB,CAACT,EAAQ,OAAS,CAACC,EAAS,MAC5B,OAAO,MAAM,wBAAwB,EAIzC,QAAQ,IAAIE,CAAQ,EACpB,aAAa,WAAWD,CAAW,EACnCC,EAAS,MAAQ,GACjBA,EAAS,QAAU,GACnBJ,EAAK,MAAK,CACd"}