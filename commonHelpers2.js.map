{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["// 1. Отримаємо посилання на форму, input, текстове поле, submit:\nconst form = document.querySelector(\".feedback-form\");  // Отримаємо посилання на форму (з посиланням на клас)\nconst inputEl = form.elements.email;                    // Отримаємо поcилання на input (в можливому іншому форматі)\nconst textarea = form.querySelector(\"textarea\");        // Отримаємо поcилання на текстове поле (з посиланням на тег)\nconst formSubmit = form.querySelector(\"button\");        // Отримаємо посилання на submit (отримано з форми, щоб уникнути можливих конфліктів)\n\n\n// 2. Створення ключа для зберігання данних у локальне сховище\nconst STORAGE_KEY = \"feedback-form-state\";            \n// (назва STORAGE_KEY з великих літер, бо не змінююється протягом виконання коду)\n\n// 3.(1.) Оголошення поза будь-якими функціями об’єкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }\nconst formData = {\n    email: '', \n    message: '',\n};\n\n// 6. (2.1) Використовуй метод делегування для відстеження змін у формі через подію input.\nform.addEventListener(\"input\", handleInput); \n\n\n// 7. (2.2) Зберігай актуальні дані *з полів email та **message у formData та ***записуй цей об’єкт у локальне сховище. Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\nfunction handleInput(event) {\n    formData.email = inputEl.value.trim();                       //*зберігання данних з поля email до formData.email\n    formData.message = textarea.value.trim();                    // **зберігання данних з поля message до formData.message\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(formData)); // *** (2.3) зберігання даних у локальне сховище за ключем\n}\n//localStorage.setItem - це метод об'єкта localStorage, який використовується для зберігання даних у локальному сховищі браузера. Він приймає два параметри: ключ і значення. Значення буде збережено під цим ключем і буде доступне навіть після перезавантаження сторінки або закриття та повторного відкриття браузера.\n//STORAGE_KEY - це ключ - використовується для доступу до відповідного запису у localStorage.\n//JSON.stringify(formData) - це метод, який перетворює об'єкт JavaScript (formData) у рядок JSON. Локальне сховище може зберігати дані лише у вигляді рядків, тому необхідно перетворити об'єкт formData у рядок перед зберіганням.\n\n// (3) При завантаженні сторінки перевір, чи є дані у локальному сховищі. Якщо так, використовуй їх для заповнення форми та об'єкта formData. Якщо ні, залиш поля форми порожніми.\nfunction loadSavedData() {\n    const savedData = localStorage.getItem(STORAGE_KEY); // Повернення данних з локального сховища збереженим за ключем.\n    if (savedData) {                                     // Перевіряємо, чи є збережені дані в локальному сховищі\n        const parsedData = JSON.parse(savedData);        // Якщо дані є, парсимо їх з формату JSON до об'єкта JavaScript\n        formData.email = parsedData.email || '';         // (3.2) Записуємо значення поля email з parsedData у об'єкт formData, або залишаємо порожнє значення, якщо його немає\n        formData.message = parsedData.message || '';     // (3.2) Записуємо значення поля message з parsedData у об'єкт formData, або залишаємо порожнє значення, якщо його немає\n        inputEl.value = formData.email;                  // Встановлюємо значення поля email у формі на значення з formData\n        textarea.value = formData.message;               // Встановлюємо значення поля message у формі на значення з formData\n    }\n}\n\n// Виклик функції для завантаження збережених даних при завантаженні сторінки\nloadSavedData();\n\n//Скасування стандартної поведінки браузера для відправлення форми, щоб ми могли обробити дані форми вручну.\nform.addEventListener(\"submit\", event => {\n    event.preventDefault();                  \n\n\n    // 9. (4.) Перед відправленням форми переконайся, що обидва поля форми заповнені. Якщо будь-яке з полів (властивостей об’єкта formData) порожнє, показуй сповіщення з текстом «Fill please all fields». \nif (!inputEl.value || !textarea.value) {\n        return alert('Fill please all fields');\n    }\n\n    // 10. (4.1) Якщо всі поля заповнені, *виведи у консоль об’єкт formData з актуальними значеннями, **очисти локальне сховище, ***об’єкт formData і ****поля форми.\n    console.log(formData);                //* виведення у консоль об’єкт formData з актуальними значеннями\n    localStorage.removeItem(STORAGE_KEY); // ** очистка локального сховища\n    formData.email = '';                  // *** очистка об’єкта formData (email)\n    formData.message = '';                // *** очистка об’єкта formData (message)\n    form.reset();                         // **** Очищення полів форми\n});"],"names":["form","inputEl","textarea","STORAGE_KEY","formData","handleInput","event","loadSavedData","savedData","parsedData"],"mappings":"wFACA,MAAMA,EAAO,SAAS,cAAc,gBAAgB,EAC9CC,EAAUD,EAAK,SAAS,MACxBE,EAAWF,EAAK,cAAc,UAAU,EAC3BA,EAAK,cAAc,QAAQ,EAI9C,MAAMG,EAAc,sBAIdC,EAAW,CACb,MAAO,GACP,QAAS,EACb,EAGAJ,EAAK,iBAAiB,QAASK,CAAW,EAI1C,SAASA,EAAYC,EAAO,CACxBF,EAAS,MAAQH,EAAQ,MAAM,KAAI,EACnCG,EAAS,QAAUF,EAAS,MAAM,KAAI,EACtC,aAAa,QAAQC,EAAa,KAAK,UAAUC,CAAQ,CAAC,CAC9D,CAMA,SAASG,GAAgB,CACrB,MAAMC,EAAY,aAAa,QAAQL,CAAW,EAClD,GAAIK,EAAW,CACX,MAAMC,EAAa,KAAK,MAAMD,CAAS,EACvCJ,EAAS,MAAQK,EAAW,OAAS,GACrCL,EAAS,QAAUK,EAAW,SAAW,GACzCR,EAAQ,MAAQG,EAAS,MACzBF,EAAS,MAAQE,EAAS,OAC7B,CACL,CAGAG,IAGAP,EAAK,iBAAiB,SAAUM,GAAS,CAKzC,GAJIA,EAAM,eAAc,EAIpB,CAACL,EAAQ,OAAS,CAACC,EAAS,MACxB,OAAO,MAAM,wBAAwB,EAIzC,QAAQ,IAAIE,CAAQ,EACpB,aAAa,WAAWD,CAAW,EACnCC,EAAS,MAAQ,GACjBA,EAAS,QAAU,GACnBJ,EAAK,MAAK,CACd,CAAC"}